{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport blogService from \"./blogService\";\nconst initialState = {\n  blog: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\"\n};\nexport const postBlogItem = createAsyncThunk(\"/postblogitem\", async (blogItemData, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await blogService.postBlogItem(blogItemData, token);\n  } catch (e) {\n    const message = e.response && e.response.data && e.response.data.message || e.message || e.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const getBlog = createAsyncThunk(\"/\", async thunkAPI => {\n  try {} catch (e) {}\n});\nexport const getBlogItemm = createAsyncThunk(\"/\", async thunkAPI => {\n  try {} catch (e) {}\n});\nexport const blogSlice = createSlice({\n  name: \"blogItem\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(postBlogItem.pending, state => {\n      state.isLoading = true;\n    }).addCase(postBlogItem.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.blog.push(action.payload);\n    }).addCase(postBlogItem.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = blogSlice.actions;\nexport default blogSlice.reducer;","map":{"version":3,"sources":["C:/Users/dougi/OneDrive/Desktop/portfolio/client/src/redux/blog/blogReducer.js"],"names":["createSlice","createAsyncThunk","blogService","initialState","blog","isError","isSuccess","isLoading","message","postBlogItem","blogItemData","thunkAPI","token","getState","auth","user","e","response","data","toString","rejectWithValue","getBlog","getBlogItemm","blogSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,SAAS,EAAE,KAHQ;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB;AAQA,OAAO,MAAMC,YAAY,GAAGR,gBAAgB,CAC1C,eAD0C,EAE1C,OAAOS,YAAP,EAAqBC,QAArB,KAAkC;AAChC,MAAI;AACF,UAAMC,KAAK,GAAGD,QAAQ,CAACE,QAAT,GAAoBC,IAApB,CAAyBC,IAAzB,CAA8BH,KAA5C;AAEA,WAAO,MAAMV,WAAW,CAACO,YAAZ,CAAyBC,YAAzB,EAAuCE,KAAvC,CAAb;AACD,GAJD,CAIE,OAAOI,CAAP,EAAU;AACV,UAAMR,OAAO,GACVQ,CAAC,CAACC,QAAF,IAAcD,CAAC,CAACC,QAAF,CAAWC,IAAzB,IAAiCF,CAAC,CAACC,QAAF,CAAWC,IAAX,CAAgBV,OAAlD,IACAQ,CAAC,CAACR,OADF,IAEAQ,CAAC,CAACG,QAAF,EAHF;AAIA,WAAOR,QAAQ,CAACS,eAAT,CAAyBZ,OAAzB,CAAP;AACD;AACF,CAdyC,CAArC;AAiBP,OAAO,MAAMa,OAAO,GAAGpB,gBAAgB,CAAC,GAAD,EAAM,MAAOU,QAAP,IAAoB;AAC/D,MAAI,CACH,CADD,CACE,OAAOK,CAAP,EAAU,CAAE;AACf,CAHsC,CAAhC;AAKP,OAAO,MAAMM,YAAY,GAAGrB,gBAAgB,CAAC,GAAD,EAAM,MAAOU,QAAP,IAAoB;AACpE,MAAI,CACH,CADD,CACE,OAAOK,CAAP,EAAU,CAAE;AACf,CAH2C,CAArC;AAKP,OAAO,MAAMO,SAAS,GAAGvB,WAAW,CAAC;AACnCwB,EAAAA,IAAI,EAAE,UAD6B;AAEnCrB,EAAAA,YAFmC;AAGnCsB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAWxB;AADV,GAHyB;AAMnCyB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWrB,YAAY,CAACsB,OADxB,EACkCJ,KAAD,IAAW;AACxCA,MAAAA,KAAK,CAACpB,SAAN,GAAkB,IAAlB;AACD,KAHH,EAIGuB,OAJH,CAIWrB,YAAY,CAACuB,SAJxB,EAImC,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAClDN,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACAoB,MAAAA,KAAK,CAACrB,SAAN,GAAkB,IAAlB;AACAqB,MAAAA,KAAK,CAACvB,IAAN,CAAW8B,IAAX,CAAgBD,MAAM,CAACE,OAAvB;AACD,KARH,EASGL,OATH,CASWrB,YAAY,CAAC2B,QATxB,EASkC,CAACT,KAAD,EAAQM,MAAR,KAAmB;AACjDN,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACAoB,MAAAA,KAAK,CAACtB,OAAN,GAAgB,IAAhB;AACAsB,MAAAA,KAAK,CAACnB,OAAN,GAAgByB,MAAM,CAACE,OAAvB;AACD,KAbH;AAcD;AArBkC,CAAD,CAA7B;AAwBP,OAAO,MAAM;AAAET,EAAAA;AAAF,IAAYH,SAAS,CAACc,OAA5B;AACP,eAAed,SAAS,CAACe,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport blogService from \"./blogService\";\n\nconst initialState = {\n  blog: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\",\n};\n\nexport const postBlogItem = createAsyncThunk(\n  \"/postblogitem\",\n  async (blogItemData, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token;\n\n      return await blogService.postBlogItem(blogItemData, token);\n    } catch (e) {\n      const message =\n        (e.response && e.response.data && e.response.data.message) ||\n        e.message ||\n        e.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\nexport const getBlog = createAsyncThunk(\"/\", async (thunkAPI) => {\n  try {\n  } catch (e) {}\n});\n\nexport const getBlogItemm = createAsyncThunk(\"/\", async (thunkAPI) => {\n  try {\n  } catch (e) {}\n});\n\nexport const blogSlice = createSlice({\n  name: \"blogItem\",\n  initialState,\n  reducers: {\n    reset: (state) => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(postBlogItem.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(postBlogItem.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isSuccess = true;\n        state.blog.push(action.payload);\n      })\n      .addCase(postBlogItem.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isError = true;\n        state.message = action.payload;\n      });\n  },\n});\n\nexport const { reset } = blogSlice.actions;\nexport default blogSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}